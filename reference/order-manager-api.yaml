openapi: 3.0.0
x-stoplight:
  id: ptt53t0unyvnw
info:
  title: order-manager-api
  version: '1.0'
servers:
  - url: 'http://localhost:8080'
    description: Localhost
  - url: 'http://localhost:8085'
    description: Docker
paths:
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email alredy taken
      description: Create a new user. The user email must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    parameters: []
    get:
      summary: Get All Users
      operationId: get-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      description: Returns a list with all available users.
  '/users/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    get:
      summary: Get User By Id
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    put:
      summary: Update User
      operationId: put-users-user_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User Not Found
      description: 'Update User '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      summary: Delete User
      operationId: delete-users-user_id
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
      description: Delete User
  /items:
    post:
      summary: Create Item
      operationId: post-item
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
      description: Create Item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
    parameters: []
    get:
      summary: Get All Items
      operationId: get-items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
              examples: {}
      description: Returns a list with all available items.
  '/items/{item_id}':
    parameters:
      - schema:
          type: string
        name: item_id
        in: path
        required: true
    get:
      summary: Delete item
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
      operationId: get-items-item_id
      description: Get item by id
    put:
      summary: Update Item
      operationId: put-items-item_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              type: object
              properties:
                item:
                  $ref: '#/components/schemas/Item'
    delete:
      summary: Delete Item
      operationId: delete-items-item_id
      responses:
        '200':
          description: OK
      description: Delete Item
  /stock-movements/:
    post:
      summary: Create Stock Movement
      operationId: post-stock-movement
      responses:
        '200':
          description: OK
      description: Add Items to the Stock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMovement'
    parameters: []
    get:
      summary: Get All Stock Movements
      operationId: get-stock-movements
      responses:
        '200':
          description: OK
      description: Retrieve all available stock movements
  '/stock-movements/{stock_movement_id}':
    parameters:
      - schema:
          type: string
        name: stock_movement_id
        in: path
        required: true
    get:
      summary: Get Stock Movement
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMovement'
      operationId: get-stock-movement-stock_movement_id
    put:
      summary: Update Stock Movement
      operationId: put-stock-movement-stock_movement_id
      responses:
        '200':
          description: OK
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMovement'
    delete:
      summary: Delete Stock Movement
      operationId: delete-stock-movement-stock_movement_id
      responses:
        '200':
          description: OK
  '/stock-movements/{stock_movement_id}/orders':
    parameters:
      - schema:
          type: string
        name: stock_movement_id
        in: path
        required: true
    get:
      summary: Get Stock Movement Orders
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderStockMovemets'
      operationId: get-stock-movement-orders_id
      description: Get Orders the consumed the Stock Movement
  /orders:
    post:
      summary: Create Order
      operationId: post-orders
      responses:
        '201':
          description: Created
        '400':
          description: Missing user id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
    get:
      summary: Get All Orders
      operationId: get-orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
      description: Retrieve all available orders
  '/orders/{order_id}':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    get:
      summary: Update Order
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
      operationId: get-orders-order_id
    put:
      summary: Update Order
      operationId: put-orders-order_id
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                order:
                  $ref: '#/components/schemas/Order'
    delete:
      summary: Delete Order
      operationId: delete-orders-order_id
      responses:
        '200':
          description: OK
  '/orders/{order_id}/stock-movement':
    parameters:
      - schema:
          type: string
        name: order_id
        in: path
        required: true
    get:
      summary: Get Order Stock Movements
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStockMovemets'
        '404':
          description: Not Found
      operationId: get-order-stock-movements
      description: Get Stock Movements used to fulfill the order
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          minimum: 1
          example: 1
        name:
          type: string
        email:
          type: string
          format: email
          example: user@mail.com
      required:
        - name
        - email
    Order:
      title: Order
      x-stoplight:
        id: esligyddn7hea
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        item:
          $ref: '#/components/schemas/ItemQuantity'
        status:
          type: string
          enum:
            - PENDING
            - COMPLETED
        created_by:
          type: integer
        creation_date:
          type: string
          format: date-time
      required:
        - created_by
    ItemQuantity:
      title: ItemQuantity
      x-stoplight:
        id: bfbujt9kwkj0d
      type: object
      properties:
        itemId:
          type: integer
        quantity:
          type: integer
          minimum: 1
      required:
        - itemId
        - quantity
    StockMovement:
      title: StockMovement
      x-stoplight:
        id: cf9drd4dskuka
      type: object
      properties:
        id:
          type: integer
          minimum: 1
        item:
          $ref: '#/components/schemas/ItemQuantity'
        creationDate:
          type: string
          format: date-time
      required:
        - item
    OrderStockMovemets:
      title: OrderStockMovements
      x-stoplight:
        id: 8dfz36i1hnpvk
      type: object
      properties:
        orderId:
          type: integer
        stockMovementId:
          type: integer
        stockConsumed:
          type: integer
          minimum: 1
        orderQuantity:
          type: integer
          minimum: 1
    Item:
      title: Item
      x-stoplight:
        id: rodz3juawhdwx
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - name
    OrderQuantity:
      title: OrderQuantity
      x-stoplight:
        id: un5qtpby2aw7h
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
        quantity:
          type: integer
          minimum: 1
    StockMovementQuantity:
      title: StockMovementQuantity
      x-stoplight:
        id: xbsp4uu7xtvma
      type: object
      properties:
        stockMovement:
          $ref: '#/components/schemas/StockMovement'
        quantity:
          type: integer
          minimum: 1
  requestBodies: {}
  parameters:
    user_id:
      name: user_id
      in: header
      required: true
      schema:
        type: string
        format: uuid
      description: 'User unique id, in UUID format'
  responses: {}
